% This file is automatically generated by updateModel.m from the NFkB whole-cell spreadsheet.
% Model URL: multi-stimulus NFkB.xlsx

%% Section 1: Declaration/initialization (code from ode_init.m)
function delta = nfkbOde(t,x,ode_options,v)
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% delta = nfkbOde(t,x,ode_options,v)
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Full NFkB ODE model - stiff system, designed to be solved using ode15 (see this function's help file to set
% options).  
% In phase 1 (v.PHASE == 1),simulation is run w/o stimulus, until convergence to initialize steady-state,
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

% Set the persistent variable that discrete-delay reactions refer to
persistent DELAY;
if isempty(t)
    % The sim function calls the ode function once without arguments to reset persistent variables
    sz = 5000; % Size of total delay memory - if DELAYS.idx exceeds this, function will throw error
    DELAY.t = zeros(sz,1);
    DELAY.rela = zeros(sz,1); % increase if getting errors
    DELAY.ikbat = zeros(sz,1); % increase if getting errors
    DELAY.crel = zeros(sz,1); % increase if getting errors
    DELAY.ikbet = zeros(sz,1); % increase if getting errors
    DELAY.idx     = 1; % index (starts at 1)
    return;
end


% Slice parameters, get previous concentrations
p = v.PARAMS;
delta = zeros(size(x));



%% Section 2: Unpack species
stim = x(1);
IkBa = x(2);
IkBan = x(3);
IkBe = x(4);
IkBen = x(5);
IkBaRelA = x(6);
IkBaRelAn = x(7);
IkBacRel = x(8);
IkBacReln = x(9);
IkBeRelA = x(10);
IkBeRelAn = x(11);
IkBecRel = x(12);
IkBecReln = x(13);
IkBat = x(14);
IkBet = x(15);
IKKIkBaRelA = x(16);
IKKIkBacRel = x(17);
IKKIkBa = x(18);
IKKIkBeRelA = x(19);
IKKIkBecRel = x(20);
IKKIkBe = x(21);
cRel = x(22);
cReln = x(23);
RelA = x(24);
RelAn = x(25);
IKK_off = x(26);
IKK = x(27);
IKK_i = x(28);
LPS = x(29);
CD14 = x(30);
CD14LPS = x(31);
CD14LPSen = x(32);
TLR4 = x(33);
TLR4en = x(34);
TLR4LPS = x(35);
TLR4LPSen = x(36);
MyD88_off = x(37);
MyD88 = x(38);
TRIF_off = x(39);
TRIF = x(40);
TRAF6_off = x(41);
TRAF6 = x(42);
TNF = x(43);
TNFR = x(44);
TNFR_TNF = x(45);
TTR = x(46);
C1_off = x(47);
C1 = x(48);
TAK1_off = x(49);
TAK1 = x(50);
Pam3CSK = x(51);
TLR2 = x(52);
CD14_P3CSK = x(53);
TLR2_P3CSK = x(54);
polyIC = x(55);
polyIC_en = x(56);
TLR3 = x(57);
TLR3_polyIC = x(58);
CpG = x(59);
CpG_en = x(60);
TLR9 = x(61);
TLR9_CpG = x(62);
TLR9_N = x(63);
FLA = x(64);
TLR5 = x(65);
TLR5_FLA = x(66);
R848 = x(67);
R848_en = x(68);
TLR7 = x(69);
TLR7_R848 = x(70);


%% Section 3: Calculate delays (code from ode_delay.m)
% Initialize/calculate delays for discrete-delay reactions
% (Delays are manually set - if reactions are rearranged such that tau indicies change, this code 
% must be reset)

% Create a cache of previous species values for transcription/translation delays.
RelAn_tau6   = RelAn;
IkBat_tau8   = IkBat;
cReln_tau28   = cReln;
IkBet_tau30   = IkBet;
RelAn_tau49   = RelAn;
if v.PHASE ~= 1
    % Match current timepoint into t vector - append, if necessary
    idx = find(DELAY.t(1:DELAY.idx)>=t,1,'first');
    if isempty(idx)
        idx = DELAY.idx+1;
    end
    DELAY.t(idx) = t;
    DELAY.idx = idx;
    DELAY.rela(DELAY.idx) = RelAn;
    DELAY.ikbat(DELAY.idx) = IkBat;
    DELAY.crel(DELAY.idx) = cReln;
    DELAY.ikbet(DELAY.idx) = IkBet;
    if DELAY.idx > length(DELAY.t)
        error(['Delay index out of range: increase memory size (line 13 - ',...
            'sz = ',num2str(length(DELAY.t)),';). Reached t = ',num2str(DELAY.t(end))])
    end

    % 1) IkBa mRNA transcription/processing delay (RXN 6)
    tau = p(6,4);
    if tau > 0  % IkBa inducible txn delay
        if t > tau
            RelAn_tau6 = ...
                interp1(DELAY.t(1:DELAY.idx-1),...
                        DELAY.rela(1:DELAY.idx-1),t-tau);
        else
            RelAn_tau6 = ...
                DELAY.rela(1); % 1st index is the steady-state value
        end
    end
    
    % 2) IkBa protein translation/maturation delay (RXN 8)
    tau = p(8,2);
    if tau > 0  % IkBb inducible txn delay
        if t > tau
            IkBat_tau8 = ...
                interp1(DELAY.t(1:DELAY.idx-1),...
                        DELAY.ikbat(1:DELAY.idx-1),t-tau);
        else
            IkBat_tau8 = ...
                DELAY.ikbat(1); % 1st index is the steady-state value
        end
    end
    
    % 3) IkBe mRNA transcription/processing delay (RXN 28)
    tau = p(28,4);
    if tau > 0  % IkBa inducible txn delay
        if t > tau
            cReln_tau28 = ...
                interp1(DELAY.t(1:DELAY.idx-1),...
                        DELAY.crel(1:DELAY.idx-1),t-tau);
        else
            cReln_tau28 = ...
                DELAY.crel(1); % 1st index is the steady-state value
        end
    end
    
    % 4) IkBe protein translation/maturation delay (RXN 8)
    tau = p(30,2);
    if tau > 0  % IkBb inducible txn delay
        if t > tau
            IkBet_tau30 = ...
                interp1(DELAY.t(1:DELAY.idx-1),...
                        DELAY.ikbet(1:DELAY.idx-1),t-tau);
        else
            IkBet_tau30 = ...
                DELAY.ikbet(1); % 1st index is the steady-state value
        end
    end
    
    % 5) IkBa mRNA transcription/processing delay (RXN 49)
    tau = p(49,4);
    if tau > 0  % IkBa inducible txn delay
        if t > tau
            RelAn_tau49 = ...
                interp1(DELAY.t(1:DELAY.idx-1),...
                        DELAY.rela(1:DELAY.idx-1),t-tau);
        else
            RelAn_tau49 = ...
                DELAY.rela(1); % 1st index is the steady-state value
        end
    end
  
end

% Pulsed stimulus (ode_options.PULSE_TIME) - if time value is greater than pulse length, set external stimuli to zero
if isfield(v,'PULSE_TIME') && (t > v.PULSE_TIME)
    TNF = 0;
    LPS = 0;
    polyIC = 0;
    Pam3CSK = 0;
    CpG = 0;
    FLA = 0;
    R848 = 0;
    stim=0;
end



%% Section 4: Set reaction rates
rxn_1 = p(1,1) * stim * IKK_off;
rxn_2 = p(2,1) * IKK_off;
rxn_3 = p(3,1) * IKK;
rxn_4 = p(4,1) * IKK_i;
rxn_5 = p(5,1);
rxn_6 = p(6,1) * (RelAn_tau6.^p(6,2))/( (RelAn_tau6.^p(6,2)) + (p(6,3).^p(6,2)) );
rxn_7 = p(7,1) * IkBat;
rxn_8 = p(8,1) * IkBat_tau8;
rxn_9 = p(9,1) * IkBa;
rxn_10 = p(10,1) * RelA;
rxn_11 = p(11,1) * IkBan;
rxn_12 = p(12,1) * RelAn;
rxn_13 = p(13,1) * IkBaRelA;
rxn_14 = p(14,1) * IkBaRelAn;
rxn_15 = p(15,1) * IkBa;
rxn_16 = p(16,1) * IkBan;
rxn_17 = p(17,1) * IkBa * RelA;
rxn_18 = p(18,1) * IkBan * RelAn;
rxn_19 = p(19,1) * IkBaRelA;
rxn_20 = p(20,1) * IkBaRelAn;
rxn_21 = p(21,1) * IKK * IkBaRelA;
rxn_22 = p(22,1) * IKK * IkBa;
rxn_23 = p(23,1) * IKKIkBaRelA;
rxn_24 = p(24,1) * IKKIkBa;
rxn_25 = p(25,1) * IKKIkBaRelA;
rxn_26 = p(26,1) * IKKIkBa;
rxn_27 = p(27,1);
rxn_28 = p(28,1) * (cReln_tau28.^p(28,2))/( (cReln_tau28.^p(28,2)) + (p(28,3).^p(28,2)) );
rxn_29 = p(29,1) * IkBet;
rxn_30 = p(30,1) * IkBet_tau30;
rxn_31 = p(31,1) * IkBe;
rxn_32 = p(32,1) * cRel;
rxn_33 = p(33,1) * IkBen;
rxn_34 = p(34,1) * cReln;
rxn_35 = p(35,1) * IkBecRel;
rxn_36 = p(36,1) * IkBecReln;
rxn_37 = p(37,1) * IkBe;
rxn_38 = p(38,1) * IkBen;
rxn_39 = p(39,1) * IkBe * cRel;
rxn_40 = p(40,1) * IkBen * cReln;
rxn_41 = p(41,1) * IkBecRel;
rxn_42 = p(42,1) * IkBecReln;
rxn_43 = p(43,1) * IKK * IkBecRel;
rxn_44 = p(44,1) * IKK * IkBe;
rxn_45 = p(45,1) * IKKIkBecRel;
rxn_46 = p(46,1) * IKKIkBe;
rxn_47 = p(47,1) * IKKIkBecRel;
rxn_48 = p(48,1) * IKKIkBe;
rxn_49 = p(49,1) * (RelAn_tau49.^p(49,2))/( (RelAn_tau49.^p(49,2)) + (p(49,3).^p(49,2)) );
rxn_50 = p(50,1) * IkBacRel;
rxn_51 = p(51,1) * IkBeRelA;
rxn_52 = p(52,1) * IkBacReln;
rxn_53 = p(53,1) * IkBeRelAn;
rxn_54 = p(54,1) * IkBa * cRel;
rxn_55 = p(55,1) * IkBe * RelA;
rxn_56 = p(56,1) * IkBan * cReln;
rxn_57 = p(57,1) * IkBen * RelAn;
rxn_58 = p(58,1) * IkBacRel;
rxn_59 = p(59,1) * IkBeRelA;
rxn_60 = p(60,1) * IkBacReln;
rxn_61 = p(61,1) * IkBeRelAn;
rxn_62 = p(62,1) * IKK * IkBacRel;
rxn_63 = p(63,1) * IKK * IkBeRelA;
rxn_64 = p(64,1) * IKKIkBacRel;
rxn_65 = p(65,1) * IKKIkBeRelA;
rxn_66 = p(66,1) * IKKIkBacRel;
rxn_67 = p(67,1) * IKKIkBeRelA;
rxn_68 = p(68,1) * LPS * CD14;
rxn_69 = p(69,1) * CD14LPS;
rxn_70 = p(70,1);
rxn_71 = p(71,1) * CD14;
rxn_72 = p(72,1) * CD14LPS * TLR4;
rxn_73 = p(73,1) * TLR4LPS;
rxn_74 = p(74,1) * CD14LPSen * TLR4en;
rxn_75 = p(75,1) * TLR4LPSen;
rxn_76 = p(76,1);
rxn_77 = p(77,1) * CD14LPS;
rxn_78 = p(78,1) * CD14LPSen;
rxn_79 = p(79,1) * TLR4;
rxn_80 = p(80,1) * TLR4en;
rxn_81 = p(81,1) * TLR4LPS;
rxn_82 = p(82,1) * TLR4LPSen;
rxn_83 = p(83,1) * CD14LPSen;
rxn_84 = p(84,1) * TLR4en;
rxn_85 = p(85,1) * TLR4LPSen;
rxn_86 = p(86,1) * (TLR4LPS.^p(86,2))/( (TLR4LPS.^p(86,2)) + (p(86,3).^p(86,2)) ) * MyD88_off;
rxn_87 = p(87,1) * MyD88;
rxn_88 = p(88,1) * TRIF_off * TLR4LPSen;
rxn_89 = p(89,1) * TRIF;
rxn_90 = p(90,1) * MyD88 * TRAF6_off;
rxn_91 = p(91,1) * TRIF * TRAF6_off;
rxn_92 = p(92,1) * TRAF6;
rxn_93 = p(93,1) * TRAF6 * TAK1_off;
rxn_94 = p(94,1) * TNF;
rxn_95 = p(95,1);
rxn_96 = p(96,1) * TNFR;
rxn_97 = p(97,1) * TNF * TNFR;
rxn_98 = p(98,1) * TNFR_TNF;
rxn_99 = p(99,1) * TNFR_TNF;
rxn_100 = p(100,1) * TNFR_TNF * TTR;
rxn_101 = p(101,1) * C1_off;
rxn_102 = p(102,1) * C1_off;
rxn_103 = p(103,1) * C1_off;
rxn_104 = p(104,1) * C1;
rxn_105 = p(105,1) * C1;
rxn_106 = p(106,1) * C1 * TAK1_off;
rxn_107 = p(107,1) * TAK1;
rxn_108 = p(108,1) * (TAK1.^p(108,2))/( (TAK1.^p(108,2)) + (p(108,3).^p(108,2)) ) * IKK_off;
rxn_109 = p(109,1);
rxn_110 = p(110,1) * TLR2;
rxn_111 = p(111,1) * Pam3CSK * CD14;
rxn_112 = p(112,1) * CD14_P3CSK;
rxn_113 = p(113,1) * CD14_P3CSK * TLR2;
rxn_114 = p(114,1) * CD14_P3CSK;
rxn_115 = p(115,1) * TLR2_P3CSK;
rxn_116 = p(116,1) * TLR2_P3CSK;
rxn_117 = p(117,1) * (TLR2_P3CSK.^p(117,2))/( (TLR2_P3CSK.^p(117,2)) + (p(117,3).^p(117,2)) ) * MyD88_off;
rxn_118 = p(118,1);
rxn_119 = p(119,1) * TLR3;
rxn_120 = p(120,1) * (polyIC.^p(120,3))/( (polyIC.^p(120,3)) + (p(120,2).^p(120,3)) );
rxn_121 = p(121,1) * polyIC_en;
rxn_122 = p(122,1) * polyIC_en * TLR3;
rxn_123 = p(123,1) * TLR3_polyIC;
rxn_124 = p(124,1) * TLR3_polyIC;
rxn_125 = p(125,1) * TRIF_off * TLR3_polyIC;
rxn_126 = p(126,1);
rxn_127 = p(127,1) * TLR9;
rxn_128 = p(128,1) * TLR9_N;
rxn_129 = p(129,1) * (CpG.^p(129,3))/( (CpG.^p(129,3)) + (p(129,2).^p(129,3)) );
rxn_130 = p(130,1) * CpG_en;
rxn_131 = p(131,1) * CpG_en * TLR9;
rxn_132 = p(132,1) * TLR9_CpG;
rxn_133 = p(133,1) * TLR9_CpG * TLR9_N;
rxn_134 = p(134,1) * TLR9_CpG;
rxn_135 = p(135,1) * (TLR9_CpG.^p(135,2))/( (TLR9_CpG.^p(135,2)) + (p(135,3).^p(135,2)) ) * MyD88_off;
rxn_136 = p(136,1);
rxn_137 = p(137,1) * TLR5;
rxn_138 = p(138,1) * FLA * TLR5;
rxn_139 = p(139,1) * TLR5_FLA;
rxn_140 = p(140,1) * TLR5_FLA;
rxn_141 = p(141,1) * (TLR5_FLA.^p(141,2))/( (TLR5_FLA.^p(141,2)) + (p(141,3).^p(141,2)) ) * MyD88_off;
rxn_142 = p(142,1);
rxn_143 = p(143,1) * TLR7;
rxn_144 = p(144,1) * (R848.^p(144,3))/( (R848.^p(144,3)) + (p(144,2).^p(144,3)) );
rxn_145 = p(145,1) * R848_en;
rxn_146 = p(146,1) * R848_en * TLR7;
rxn_147 = p(147,1) * TLR7_R848;
rxn_148 = p(148,1) * TLR7_R848;
rxn_149 = p(149,1) * (TLR7_R848.^p(149,2))/( (TLR7_R848.^p(149,2)) + (p(149,3).^p(149,2)) ) * MyD88_off;


%% Section 5: Set species' deltas from reactions
delta(1) = 0;
delta(2) = - rxn_9 - rxn_15 - rxn_17 - rxn_22 - rxn_54 + rxn_8 + (rxn_11 * p(11,2)) + rxn_19 + rxn_24 + rxn_58;
delta(3) = - rxn_11 - rxn_16 - rxn_18 - rxn_56 + (rxn_9 * p(9,2)) + rxn_20 + rxn_60;
delta(4) = - rxn_31 - rxn_37 - rxn_39 - rxn_44 - rxn_55 + rxn_30 + (rxn_33 * p(33,2)) + rxn_41 + rxn_46 + rxn_59;
delta(5) = - rxn_33 - rxn_38 - rxn_40 - rxn_57 + (rxn_31 * p(31,2)) + rxn_42 + rxn_61;
delta(6) = - rxn_13 - rxn_19 - rxn_21 + (rxn_14 * p(14,2)) + rxn_17 + rxn_23;
delta(7) = - rxn_14 - rxn_20 + (rxn_13 * p(13,2)) + rxn_18;
delta(8) = - rxn_50 - rxn_58 - rxn_62 + (rxn_52 * p(52,2)) + rxn_54 + rxn_64;
delta(9) = - rxn_52 - rxn_60 + (rxn_50 * p(50,2)) + rxn_56;
delta(10) = - rxn_51 - rxn_59 - rxn_63 + (rxn_53 * p(53,2)) + rxn_55 + rxn_65;
delta(11) = - rxn_53 - rxn_61 + (rxn_51 * p(51,2)) + rxn_57;
delta(12) = - rxn_35 - rxn_41 - rxn_43 + (rxn_36 * p(36,2)) + rxn_39 + rxn_45;
delta(13) = - rxn_36 - rxn_42 + (rxn_35 * p(35,2)) + rxn_40;
delta(14) = - rxn_7 + rxn_5 + rxn_6;
delta(15) = - rxn_29 + rxn_27 + rxn_28 + rxn_49;
delta(16) = - rxn_23 - rxn_25 + rxn_21;
delta(17) = - rxn_64 - rxn_66 + rxn_62;
delta(18) = - rxn_24 - rxn_26 + rxn_22;
delta(19) = - rxn_65 - rxn_67 + rxn_63;
delta(20) = - rxn_45 - rxn_47 + rxn_43;
delta(21) = - rxn_46 - rxn_48 + rxn_44;
delta(22) = - rxn_32 - rxn_39 - rxn_54 + (rxn_34 * p(34,2)) + rxn_41 + rxn_47 + rxn_58 + rxn_66;
delta(23) = - rxn_34 - rxn_40 - rxn_56 + (rxn_32 * p(32,2)) + rxn_42 + rxn_60;
delta(24) = - rxn_10 - rxn_17 - rxn_55 + (rxn_12 * p(12,2)) + rxn_19 + rxn_25 + rxn_59 + rxn_67;
delta(25) = - rxn_12 - rxn_18 - rxn_57 + (rxn_10 * p(10,2)) + rxn_20 + rxn_61;
delta(26) = - rxn_1 - rxn_2 - rxn_108 + rxn_4;
delta(27) = - rxn_3 - rxn_21 - rxn_22 - rxn_43 - rxn_44 - rxn_62 - rxn_63 + rxn_1 + rxn_2 + rxn_23 + rxn_24 + rxn_25 + rxn_26 + rxn_45 + rxn_46 + rxn_47 + rxn_48 + rxn_64 + rxn_65 + rxn_66 + rxn_67 + rxn_108;
delta(28) = - rxn_4 + rxn_3;
delta(29) = - (rxn_68 * p(68,2)) + (rxn_69 * p(69,2));
delta(30) = - rxn_68 - rxn_71 - rxn_111 + rxn_69 + rxn_70 + rxn_112;
delta(31) = - rxn_69 - rxn_72 - rxn_77 + rxn_68 + rxn_73 + rxn_78;
delta(32) = - rxn_74 - rxn_78 - rxn_83 + rxn_75 + rxn_77;
delta(33) = - rxn_72 - rxn_79 + rxn_73 + rxn_76 + rxn_80;
delta(34) = - rxn_74 - rxn_80 - rxn_84 + rxn_75 + rxn_79;
delta(35) = - rxn_73 - rxn_81 + rxn_72 + rxn_82;
delta(36) = - rxn_75 - rxn_82 - rxn_85 + rxn_74 + rxn_81;
delta(37) = - rxn_86 - rxn_117 - rxn_135 - rxn_141 - rxn_149 + rxn_87;
delta(38) = - rxn_87 + rxn_86 + rxn_117 + rxn_135 + rxn_141 + rxn_149;
delta(39) = - rxn_88 - rxn_125 + rxn_89;
delta(40) = - rxn_89 + rxn_88 + rxn_125;
delta(41) = - rxn_90 - rxn_91 + rxn_92;
delta(42) = - rxn_92 + rxn_90 + rxn_91;
delta(43) = - rxn_94 - (rxn_97 * p(97,2)) + (rxn_98 * p(98,2));
delta(44) = - rxn_96 - rxn_97 + rxn_95 + rxn_98;
delta(45) = - rxn_98 - rxn_99 - rxn_100 + rxn_97 + rxn_101;
delta(46) = - rxn_100 + rxn_101;
delta(47) = - rxn_101 - rxn_102 - rxn_103 + rxn_100 + rxn_104;
delta(48) = - rxn_104 - rxn_105 + rxn_103;
delta(49) = - rxn_93 - rxn_106 + rxn_107;
delta(50) = - rxn_107 + rxn_93 + rxn_106;
delta(51) = - (rxn_111 * p(111,2)) + (rxn_112 * p(112,2));
delta(52) = - rxn_110 - rxn_113 + rxn_109 + rxn_115;
delta(53) = - rxn_112 - rxn_113 - rxn_114 + rxn_111 + rxn_115;
delta(54) = - rxn_115 - rxn_116 + rxn_113;
delta(55) = - (rxn_120 * p(120,4)) + (rxn_121 * p(121,2));
delta(56) = - rxn_121 - rxn_122 + rxn_120 + rxn_123;
delta(57) = - rxn_119 - rxn_122 + rxn_118 + rxn_123;
delta(58) = - rxn_123 - rxn_124 + rxn_122;
delta(59) = - (rxn_129 * p(129,4)) + (rxn_130 * p(130,2));
delta(60) = - rxn_130 - rxn_131 + rxn_129 + rxn_132;
delta(61) = - rxn_127 - rxn_131 + rxn_126 + rxn_132;
delta(62) = - rxn_132 - rxn_133 - rxn_134 + rxn_131;
delta(63) = - rxn_128 - rxn_133 + rxn_126;
delta(64) = - (rxn_138 * p(138,2)) + (rxn_139 * p(139,2));
delta(65) = - rxn_137 - rxn_138 + rxn_136 + rxn_139;
delta(66) = - rxn_139 - rxn_140 + rxn_138;
delta(67) = - (rxn_144 * p(144,4)) + (rxn_145 * p(145,2));
delta(68) = - rxn_145 - rxn_146 + rxn_144 + rxn_147;
delta(69) = - rxn_143 - rxn_146 + rxn_142 + rxn_147;
delta(70) = - rxn_147 - rxn_148 + rxn_146;
